# interpreter for shell commands
set shell zsh

# ignore case when search unless uppercase letters are used
set ignorecase true
set smartcase true

# a tab is four spaces
set tabstop 4

# jump to match during search with each keypress
set incsearch true

# do not show previews
set preview false

# show line numbers (enables quicker jumping sometimes)
set number true

# two columns only, no preview pane on the right
set ratios 1:2

# do not draw a border between the columns
set drawbox false

# clear the files marked for cut or copy upon quitting
cmd on-quit clear

# kill the server process when there is no client running
set autoquit true

# show last write time next to files and folders
set info time
set infotimefmtnew "2006-01-02 15:04"
set infotimefmtold "2006-01-02 15:04"

# allow wrapped scrolling
set wrapscroll true

# refresh the list every one second
set period 1

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-euy'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# change the rename behavior to be more like vim
map r :rename; cmd-delete-home          #replace filename (excluding filename)
map R :rename; cmd-end; cmd-delete-home #replace filename (including filename)
map i :rename; cmd-home                 #cursor at the beginning of the filename
map I :rename; cmd-home                 #cursor at the beginning of the filename
map a :rename                           #cursor at the end (excluding filename)
map A :rename; cmd-end                  #cursor at the end (including filename)

# bulk rename (from the lf wiki). sends a list of files selected to $EDITOR for
# renaming
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# move to next or previous directory
map J :updir; set dironly true; down; set dironly false; open
map K :updir; set dironly true; up; set dironly false; open

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# map the escape key to "clear selection" as well as the default "u"
map <esc> unselect 

# some "bookmarks"
map gc cd ~/.config
map gd cd ~/Downloads
map gw cd ~/Documents/text-vault
map gm cd '~/music work'
map gs cd ~/sw

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# copy files, paths, and directory names to the clipboard
map y
map yy copy
map yp $printf "%s" "$fx" | pbcopy
# ghead must be used here since the default head on MacOS sucks
map yd $dirname "$f" | ghead -c -1 | pbcopy

# define a custom 'delete' command (actually moves files and folders to the 
# system trash)
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/N]"
    read ans
    case "$ans" in
        [yY][eE][sS]|[yY])
        mv $fx ~/.Trash;;
    *)
        echo "delete cancelled";;
    esac
}}

# use '<delete>' key for the 'delete' command
map <delete> delete

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        # on MacOS, ditto is much more robust than zip / unzip this is easier
        # easier than using Keka: we don't have to specify the archive type
        *.zip) ditto -x -k $f $PWD;;
        # use Keka's command-line tool for rar files
        *.rar) /Applications/Keka.app/Contents/MacOS/Keka --cli unrar x $f;; 
        *.7z) /Applications/Keka.app/Contents/MacOS/Keka --cli 7z x $f;; 
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with ditto (for MacOS)
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    ditto -c -k --sequesterRsrc --keepParent $1 $1.zip
    rm -rf $1
}}

# use fzf to jump to a directory "under" the current one
cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}
map F fzf_jump

# open gui file manager at current location
cmd open-file-manager-here ${{
  open $PWD
}}
map f       #unmap f
map fm open-file-manager-here

# show current directory in window title
cmd on-cd &{{
    #'&' commands run silently in background (which is what we want here), but
    #are not connected to stdout. To make sure our escape sequence still 
    #reaches stdout we pipe it to /dev/tty
    printf "\033]0; $PWD\007" > /dev/tty
}}
# also run at startup so the directory is always shown in the title
on-cd
# we also want to un-set the window title when quitting
cmd on-quit &{{
    printf "\033]0; \e\\" > /dev/tty
}}

# "cd on quit"
map q %{{
  lf -remote "send $id :cd '$OLDPWD'; quit"
}}
map Q quit      #just in case shift is held while trying to quit
cmd q quit      #just in case vim muscle memory takes over
